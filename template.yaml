apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: template-micronaut-jib2
  title: Micronaut with Jib
  description: Develop a Micronaut-based application while letting Jib (by Google) handle containerization
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Details
      required:
        - name
        - owner
      properties:
        name:
          title: Name
          type: string
          description: Informal name of the application and its Backstage component name (next step handles sensitive variant names)
          ui:autofocus: true
          ui:options:
            rows: 5
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group, User]
    - title: Infrastructure Details
      required:
        - gcpProject
        - crumb
        - domain
        - repoUrl
      properties:
        gcpProject:
          title: GCP Project
          type: string
          description: Target GCP project to deploy to
          default: proto-client-ttf-832500
        crumb:
          title: Crumb
          type: string
          description: Sensitive lower case name of app to use in DNS, Git, and other technical places. Hyphens OK
        domain:
          title: Domain
          type: string
          description: Top level domain to create the app a subdomain for using the crumb
          default: terasology.io
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - CervTest

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: ${{ parameters.name }}
          owner: ${{ parameters.owner }}
          gcpProject: ${{ parameters.gcpProject }}
          crumb: ${{ parameters.crumb }}
          domain: ${{ parameters.domain }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Hosted environment
        url: ${{ parameters.crumb }}.${{ parameters.domain }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
